from datetime import datetime
from aiogram import types
from aiogram import F, Router
import re
import logging

from app.db.requests import add_request

router = Router()


def parse_structured_text(text: str) -> dict:
    data = {}
    text = text.replace("\xa0", " ").replace("\r", "")  # –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    lines = [line.strip() for line in text.split("\n") if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    if "–ü—Ä–∏–Ω—è—Ç —Ç–æ–≤–∞—Ä ‚Äì –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç" not in text:
        return {}

    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ —Ç–µ–∫—Å—Ç–µ
    date_pattern = r"\b\d{2}\.\d{2}\.\d{4}\b"

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    order_pattern = re.compile(
        r"–ó–∞–∫–∞–∑ ‚Ññ\s*(?P<order_id>[^\s]+)\s*(?P<order_date>\d{2}\.\d{2}\.\d{4})?"
    )

    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    for line in lines:
        if "–ó–∞–∫–∞–∑ ‚Ññ" in line:
            match = order_pattern.search(line)
            if match:
                data["order_id"] = match.group("order_id")
                print(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–∞–π–¥–µ–Ω: {data['order_id']}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                print(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: {line}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            continue

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–∏–µ–º–∞
        if "–¥–∞—Ç–∞ –ø—Ä–∏–µ–º–∞" in line.lower():
            date_match = re.search(date_pattern, line)
            if date_match:
                data["acceptance_date"] = date_match.group()
                print(f"–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞: {data['acceptance_date']}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                print(f"–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
        if "–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:" in line:
            reason_match = re.search(r'"([^"]+)"', line)
            if reason_match:
                data["reason"] = reason_match.group(1)
                print(f"–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {data['reason']}", len(data['reason']))  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(data['reason']) < 5:
                    data["reason"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è!"
            else:
                print(f"–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –°–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    product_lines = []
    collect_product = False
    for line in lines:
        if "–ó–∞–∫–∞–∑ ‚Ññ" in line:
            collect_product = True
            continue

        if collect_product and any(key in line for key in ["–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:", "–ö–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"]):
            break

        if collect_product:
            product_lines.append(line)

    if product_lines:
        data["product_name"] = " ".join(product_lines).strip()
        print(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–æ: {data['product_name']}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        data["product_name"] =  "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è!"

    return data


@router.message(F.text | F.caption)
async def handle_text(message: types.Message):
    text = message.text or message.caption
    if not text or "–ü—Ä–∏–Ω—è—Ç —Ç–æ–≤–∞—Ä ‚Äì –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç" not in text:
        return

    extracted_data = parse_structured_text(text)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['order_id', 'acceptance_date', 'reason']
    if not all(extracted_data.get(field) for field in required_fields):
        await message.reply("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞,"
                            " –¥–∞—Ç–∞ –ø—Ä–∏–µ–º–∞, —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞")
        return

    try:
        acceptance_date = datetime.strptime(extracted_data['acceptance_date'], "%d.%m.%Y").date()
    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {str(e)}")
        return


    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = (
        "**–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {extracted_data['order_id']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞: {extracted_data['acceptance_date']}\n"
        f"üõçÔ∏è –¢–æ–≤–∞—Ä: {extracted_data.get('product_name', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üîß –ü—Ä–∏—á–∏–Ω–∞: {extracted_data['reason']}"
    )

    try:
        await add_request(
            order_number=extracted_data['order_id'],
            order_date=acceptance_date,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞ –∫–∞–∫ –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞
            product_name=extracted_data['product_name'],
            return_reason=extracted_data['reason']
        )
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        logging.error(f"Database error: {str(e)}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")