from aiogram import Router, F
from app.keyboards.admin_keyboards import get_main_keyboard
from aiogram.types import Message
from aiogram.filters import Command
from app.db.models import async_session
from app.db.models import ReturnRequest
from sqlalchemy import select
import logging
from app.db.requests import get_pending_requests

router = Router()


@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_main_keyboard(message.from_user.id))


@router.message(F.text == "–ü—Ä–∏–µ–º–∫–∞")
async def start_acceptance(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")


@router.message(F.text.regexp(r'^\d+$'))
async def process_order_number(message: Message):
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(ReturnRequest).where(ReturnRequest.order_number == message.text)
            )
            request = result.scalars().first()

            if request:
                request.is_arrived = True
                await message.answer("–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä")
async def send_daily_report(message: Message):
    try:
        requests = await get_pending_requests()
        if not requests:
            return

        text = "‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ –ü–í–ó:*\n\n"
        for req in requests:
            text += (
                f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{req.order_number}`\n"
                f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞: {req.admission_date}\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {req.product_name}\n"
                f"üü• –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {req.return_reason}\n\n"
            )

        await message.answer(
            text=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Error sending daily report: {str(e)}")