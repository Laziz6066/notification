from aiogram import Router, F
from datetime import datetime
from app.db.state import AddOrder
from app.keyboards.admin_keyboards import get_main_keyboard
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from app.db.models import async_session
from app.db.models import ReturnRequest
from sqlalchemy import select
import logging
from app.db.requests import get_pending_requests, add_request, get_arrived_requests
from app.config import ADMINS, ADMIN
from aiogram.fsm.context import FSMContext
import pandas as pd
from io import BytesIO


router = Router()


@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_main_keyboard(message.from_user.id))

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
async def add_order(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN:
        await state.set_state(AddOrder.order_number)
        await message.answer("‚Ññ –∑–∞–∫–∞–∑–∞:")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!!!")


@router.message(AddOrder.order_number)
async def order_num(message: Message, state: FSMContext):
    await state.update_data(order_number=message.text)
    await state.set_state(AddOrder.order_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>26.12.2024</b>", parse_mode="HTML")


@router.message(AddOrder.order_date)
async def order_date(message: Message, state: FSMContext):
    date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
    await state.update_data(order_date=date_obj)
    await state.set_state(AddOrder.product_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")


@router.message(AddOrder.product_name)
async def order_item_name(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await state.set_state(AddOrder.return_reason)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞: ")


@router.message(AddOrder.return_reason)
async def order_reason(message: Message, state: FSMContext):
    await state.update_data(return_reason=message.text.strip())
    data = await state.get_data()

    await add_request(
        order_number=data['order_number'],
        order_date=data['order_date'],
        product_name=data['product_name'],
        return_reason=data['return_reason']
    )

    await state.clear()
    await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


@router.message(F.text == "–ü—Ä–∏–µ–º–∫–∞")
async def start_acceptance(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")


@router.message(F.text.regexp(r'^\d{5,}$'), F.from_user.id.in_(ADMINS))
async def process_order_number(message: Message):
    async with async_session() as session:
        try:
            async with session.begin():
                result = await session.execute(
                    select(ReturnRequest)
                    .where(ReturnRequest.order_number == message.text)
                    .with_for_update()
                )
                request = result.scalars().first()

                if request:
                    request.is_arrived = True
                    await session.commit()
                    await message.answer("–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logging.error(f"Error updating order: {str(e)}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä")
async def send_daily_report(message: Message):
    try:
        requests = await get_pending_requests()
        if not requests:
            return

        text = "‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ –ü–í–ó:*\n\n"
        for req in requests:
            text += (
                f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `{req.order_number}`\n"
                f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞: {req.order_date}\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä: {req.product_name}\n"
                f"üü• –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {req.return_reason}\n\n"
            )

        await message.answer(
            text=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Error sending daily report: {str(e)}")


@router.message(F.text == "–û—Ç—á—ë—Ç")
async def generate_report(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        requests = await get_arrived_requests()
        if not requests:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞")
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([{
            "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": req.order_number,
            "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞": req.order_date.strftime("%d.%m.%Y"),
            "–¢–æ–≤–∞—Ä": req.product_name,
            "–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞": req.return_reason,
            "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è": datetime.now().strftime("%d.%m.%Y %H:%M")
        } for req in requests])

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='–û—Ç—á—ë—Ç', index=False)
            worksheet = writer.sheets['–û—Ç—á—ë—Ç']
            worksheet.set_column('A:E', 25)

        output.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            document=BufferedInputFile(output.read(), filename="report.xlsx"),
            caption="–û—Ç—á—ë—Ç –ø–æ –ø—Ä–∏–±—ã–≤—à–∏–º —Ç–æ–≤–∞—Ä–∞–º"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")